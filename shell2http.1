.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "SHELL2HTTP" "" "February 2017" "" ""
HTTP\-server for executing shell commands\. Designed for develop, prototype or remote control\. Settings through two command line arguments, path and shell command\. By default bind to :8080\.
.
.SH "Usage"
.
.nf

shell2http [options] /path "shell command" /path2 "shell command2" \.\.\.
options:
    \-host="host"    : host for http server, default \- all interfaces
    \-port=NNNN      : port for http server, default \- 8080
    \-form           : parse query into environment vars
    \-cgi            : run scripts in CGI\-mode:
                      \- set environment variables
                      \- write POST\-data to STDIN (if not set \-form)
                      \- parse headers from script (eg: "Location: URL\en\en")
    \-export\-vars=var: export environment vars ("VAR1,VAR2,\.\.\.")
                      by default export PATH, HOME, LANG, USER, TMPDIR
    \-export\-all\-vars: export all current environment vars
    \-no\-index       : dont generate index page
    \-add\-exit       : add /exit command
    \-log=filename   : log filename, default \- STDOUT
    \-shell="shell"  : shell for execute command, "" \- without shell
    \-cache=NNN      : caching command out for NNN seconds
    \-one\-thread     : run each shell command in one thread
    \-show\-errors    : show the standard output even if the command exits with a non\-zero exit code
    \-include\-stderr : include stderr to output (default is stdout only)
    \-cert=cert\.pem  : SSL certificate path (if specified \-cert/\-key options \- run https server)
    \-key=key\.pem    : SSL private key path
    \-basic\-auth=""  : setup HTTP Basic Authentication ("user_name:password")
    \-version
    \-help
.
.fi
.
.SH "Install"
MacOS:
.
.IP "" 4
.
.nf

brew tap msoap/tools
brew install shell2http
# update:
brew upgrade shell2http
.
.fi
.
.IP "" 0
.
.P
Or download binaries from: releases \fIhttps://github\.com/msoap/shell2http/releases\fR (OS X/Linux/Windows/RaspberryPi)
.
.P
Or build from source:
.
.IP "" 4
.
.nf

go get \-u github\.com/msoap/shell2http
# set link to your PATH if needed:
ln \-s $(go env GOPATH)/bin/shell2http ~/bin/shell2http
.
.fi
.
.IP "" 0
.
.SH "Examples"
.
.nf

shell2http /top "top \-l 1 | head \-10"
shell2http /date date /ps "ps aux"
shell2http \-export\-all\-vars /env \'printenv | sort\' /env/path \'echo $PATH\' /env/gopath \'echo $GOPATH\'
shell2http \-export\-all\-vars /shell_vars_json \'perl \-MJSON \-E "say to_json(\e%ENV)"\'
shell2http \-export\-vars=GOPATH /get \'echo $GOPATH\'
.
.fi
.
.P
.
.P
.
.P
.
.P
.
.P
.
.P
.
.P
.
.P
.
.P
.
.SH "Run from Docker\-container"
Example of \fBtest\.Dockerfile\fR for server for get current date:
.
.IP "" 4
.
.nf

FROM msoap/shell2http
# may be install some alpine packages:
# RUN apk add \-\-no\-cache \.\.\.
CMD ["/date", "date"]
.
.fi
.
.IP "" 0
.
.P
Build and run container:
.
.IP "" 4
.
.nf

docker build \-f test\.Dockerfile \-t date\-server \.
docker run \-\-rm \-p 8080:8080 date\-server
.
.fi
.
.IP "" 0
.
.SH "SSL"
Run https server:
.
.IP "" 4
.
.nf

shell2telegram \-cert=\./cert\.pem \-key=\./key\.pem \.\.\.
.
.fi
.
.IP "" 0
.
.P
Generate self\-signed certificate:
.
.IP "" 4
.
.nf

go run $(go env GOROOT)/src/crypto/tls/generate_cert\.go \-host localhost
.
.fi
.
.IP "" 0
.
.SH "See also"
.
.IP "\(bu" 4
Emergency web server \- spark \fIhttps://github\.com/rif/spark\fR
.
.IP "\(bu" 4
Share your terminal as a web application \- gotty \fIhttps://github\.com/yudai/gotty\fR
.
.IP "\(bu" 4
Create Telegram bot from command\-line \- shell2telegram \fIhttps://github\.com/msoap/shell2telegram\fR
.
.IP "\(bu" 4
A http daemon for local development \- devd \fIhttps://github\.com/cortesi/devd\fR
.
.IP "\(bu" 4
Turn any program that uses STDIN/STDOUT into a WebSocket server \- websocketd \fIhttps://github\.com/joewalnes/websocketd\fR
.
.IP "\(bu" 4
The same tool configurable via JSON \- webhook \fIhttps://github\.com/adnanh/webhook\fR
.
.IP "" 0

